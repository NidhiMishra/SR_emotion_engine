// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#ifndef SPEECHINPUT_H
#define SPEECHINPUT_H

#include "SpeechRecognitionService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <string>
#include "global_declaration.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::imi;

class SpeechRecognitionServiceHandler : virtual public SpeechRecognitionServiceIf {
 public:
  SpeechRecognitionServiceHandler() {
    // Your initialization goes here
  }

  int TransferSentence(const std::string& phrase){
	  if(phrase== "I don't like to go with you" || phrase =="You look ugly today" || phrase =="You are so mean" ||
		  phrase =="Your voice sounds sleepy" || phrase =="You are so boring" || phrase =="I don't like to talk with you")
		  return 1;
	  else if(phrase == "I like to go with you so much" || phrase =="You look pretty today" || phrase =="You are so nice" ||
		  phrase =="Your voice sounds charming" || phrase =="You are so interesting" || phrase =="You are my best friend")
		  return 2;
	  else if(phrase == "What's your plan today" || phrase == "Shall we go swimming" || phrase == "would you like to go swimming" || phrase == "Let's go swimming")
		  return 3;
	  else if(phrase == "Hi Sophie")
		  return 4;
	  else if(phrase == "Goodbye")
		  return 5;
	  else if(phrase == "Let's talk about today's plan")
		  return 6;
  }

  void sentenceRecognized(const std::string& sensorID, const  ::imi::Microseconds timestamp, const std::string& sentence, const int32_t confidence) {
    // Your implementation goes here
	  user_speech_input=TransferSentence(sentence);
      //printf("sentenceRecognized\n");
  }

};


#endif

